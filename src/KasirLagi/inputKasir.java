/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package KasirLagi;

import UILogin.UserProfile;
import UILogin.Koneksi;
import UILogin.logout;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author LENOVO
 */
public class inputKasir extends javax.swing.JFrame {

    UILogin.UserProfile u;

    /**
     * Creates new form inputKasir
     */
    public inputKasir() {
        initComponents();
    }

    public inputKasir(UILogin.UserProfile up) {
        initComponents();

        if (up != null) {
            this.u = up;
            // Debugging output untuk memastikan getFullname() mengembalikan nilai yang benar
            System.out.println("Full name: " + u.getFullname());
            txtNamaProfile10000.setText(u.getFullname()); // Pastikan txtNamaProfile10000 ada
            txtLevel10000.setText(u.getLevel());
        } else {
            System.out.println("UserProfile is null");
        }

        updateData1();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNamaProfile10000 = new javax.swing.JLabel();
        txtLevel10000 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        header = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sidebar = new javax.swing.JPanel();
        btnHome = new rojeru_san.complementos.RSButtonHover();
        btnLogout1 = new rojeru_san.complementos.RSButtonHover();
        btnHome1 = new rojeru_san.complementos.RSButtonHover();
        btnHome2 = new rojeru_san.complementos.RSButtonHover();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblTotalHarga = new javax.swing.JLabel();
        uangPembayaran = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        uangPembayaran1 = new javax.swing.JLabel();
        lblKembalian = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        TAMBAHAN = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnHapus = new rojeru_san.complementos.RSButtonHover();
        btnCO = new rojeru_san.complementos.RSButtonHover();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNamaProfile10000.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        txtNamaProfile10000.setForeground(new java.awt.Color(240, 240, 240));
        txtNamaProfile10000.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtNamaProfile10000.setText("Nama");
        getContentPane().add(txtNamaProfile10000, new org.netbeans.lib.awtextra.AbsoluteConstraints(1149, 25, -1, 23));

        txtLevel10000.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        txtLevel10000.setForeground(new java.awt.Color(240, 240, 240));
        txtLevel10000.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtLevel10000.setText("Role");
        getContentPane().add(txtLevel10000, new org.netbeans.lib.awtextra.AbsoluteConstraints(1183, 54, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/PROFILE.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 20, -1, -1));

        header.setBackground(new java.awt.Color(12, 139, 139));
        header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("(Kasir)");
        jLabel2.setToolTipText("");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        header.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Point Of Sales");
        jLabel3.setToolTipText("");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        header.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        getContentPane().add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1816, 90));

        sidebar.setBackground(new java.awt.Color(51, 51, 51));
        sidebar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHome.setBackground(new java.awt.Color(51, 51, 51));
        btnHome.setText("Laporan Harian");
        btnHome.setColorHover(new java.awt.Color(102, 102, 102));
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });
        sidebar.add(btnHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 220, 50));

        btnLogout1.setBackground(new java.awt.Color(255, 51, 51));
        btnLogout1.setText("LOGOUT");
        btnLogout1.setColorHover(new java.awt.Color(153, 0, 0));
        btnLogout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogout1ActionPerformed(evt);
            }
        });
        sidebar.add(btnLogout1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 580, 220, -1));

        btnHome1.setBackground(new java.awt.Color(51, 51, 51));
        btnHome1.setText("Home");
        btnHome1.setColorHover(new java.awt.Color(102, 102, 102));
        btnHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHome1ActionPerformed(evt);
            }
        });
        sidebar.add(btnHome1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 50));

        btnHome2.setBackground(new java.awt.Color(102, 102, 102));
        btnHome2.setText("Input");
        btnHome2.setColorHover(new java.awt.Color(102, 102, 102));
        btnHome2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHome2ActionPerformed(evt);
            }
        });
        sidebar.add(btnHome2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 220, 50));

        getContentPane().add(sidebar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 96, -1, 972));

        tblCart.setBackground(new java.awt.Color(204, 204, 204));
        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA PRODUK", "QTY", "HARGA", "kasir"
            }
        ));
        jScrollPane1.setViewportView(tblCart);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, 1110, 400));

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 110, 410, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Product");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 110, -1, 28));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Total Harga");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 155, -1));

        lblTotalHarga.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTotalHarga.setForeground(new java.awt.Color(255, 0, 0));
        lblTotalHarga.setText("Rp. 0");
        jPanel1.add(lblTotalHarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 220, -1));

        uangPembayaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        uangPembayaran.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        uangPembayaran.setText("Uang Pembayaran");
        jPanel1.add(uangPembayaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 31, 155, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 214, 30));

        uangPembayaran1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        uangPembayaran1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        uangPembayaran1.setText("Uang Kembalian");
        jPanel1.add(uangPembayaran1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 74, 155, -1));

        lblKembalian.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblKembalian.setForeground(new java.awt.Color(255, 0, 0));
        lblKembalian.setText("Rp. 0");
        jPanel1.add(lblKembalian, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 214, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 590, 470, 110));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1324, 250, -1, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(958, 250, -1, 415));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

        TAMBAHAN.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout TAMBAHANLayout = new javax.swing.GroupLayout(TAMBAHAN);
        TAMBAHAN.setLayout(TAMBAHANLayout);
        TAMBAHANLayout.setHorizontalGroup(
            TAMBAHANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        TAMBAHANLayout.setVerticalGroup(
            TAMBAHANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        getContentPane().add(TAMBAHAN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -50, -1, 150));

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, -1, -1));

        btnHapus.setBackground(new java.awt.Color(255, 51, 51));
        btnHapus.setText("Hapus");
        btnHapus.setColorHover(new java.awt.Color(153, 0, 0));
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        getContentPane().add(btnHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 130, 40));

        btnCO.setText("CheckOut");
        btnCO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCOActionPerformed(evt);
            }
        });
        getContentPane().add(btnCO, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 610, 130, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        KasirLagi.laporanKasir l = new KasirLagi.laporanKasir(u);
        l.setVisible(true);
        l.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnLogout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogout1ActionPerformed
        logout.Logout(this);
    }//GEN-LAST:event_btnLogout1ActionPerformed

    private void btnHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHome1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        homeKasir l = new homeKasir(u);
        l.setVisible(true);
        l.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_btnHome1ActionPerformed

    private void btnHome2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHome2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHome2ActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        String kode = txtSearch.getText();
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if (row >= 0 && column >= 0) {
                    updateharga();
                }
            }
        });
        try {
            Connection K = Koneksi.Go();
            String Q = "SELECT id, nama_produk, harga_produk_jual, produk_stok FROM produk WHERE produk_kode='" + kode + "'";
            Statement S = K.createStatement();
            ResultSet R = S.executeQuery(Q);
            while (R.next()) {
                int id = R.getInt("id");
                String pName = R.getString("nama_produk");
                int pPr = R.getInt("harga_produk_jual");
                int pSt = R.getInt("produk_stok");

//                boolean adadiTabel = cekID();                
                //cek, apakah produk sudah ada di keranjang
                int dt = tblCart.getRowCount();//0
                if (dt > 0) {
                    boolean ada = false;
                    int baris = 0;
                    int QTY = 0;
                    for (int i = 0; i < dt; i++) {
                        int dt_id = Integer.parseInt(tblCart.getValueAt(i, 0).toString());
                        int dt_QTY = Integer.parseInt(tblCart.getValueAt(i, 2).toString());
                        if (dt_id == id) {
                            ada = true;
                            baris = i;
                            QTY = dt_QTY;

                            break;
                        }
                    }

                    //percabangan +QTY atau add new produk
                    if (ada) {
                        tblCart.setValueAt(QTY + 1, baris, 2);
                    } else {
                        Object[] data = {id, pName, 1, pPr};
                        model.addRow(data);
                    }
                } else {
                    Object[] data = {id, pName, 1, pPr};
                    model.addRow(data);
                }
            }

            updateharga();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        removeProductFromCart();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCOActionPerformed

//        try {
//            // Simpan transaksi penjualan ke database
//            Connection K = Koneksi.Go();
//            String tgl = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
//
//            int kasirId = u.getId(); // ID kasir yang sedang login
//
//            // Query untuk tabel transaksi
//            String transaksiQuery = "INSERT INTO transaksi (tanggal) VALUES (?)";
//            PreparedStatement transaksiStmt = K.prepareStatement(transaksiQuery, Statement.RETURN_GENERATED_KEYS);
//            transaksiStmt.setString(1, tgl);
//            transaksiStmt.executeUpdate();
//
//            // Ambil ID transaksi baru
//            ResultSet rs = transaksiStmt.getGeneratedKeys();
//            int transaksiId = 0;
//            if (rs.next()) {
//                transaksiId = rs.getInt(1);
//            }
//
//            // Query untuk tabel transaksi_detail
//            String detailQuery = "INSERT INTO transaksi_detail (transaksi_id, produk_detail_id, jumlah, waktu_transaksi, total, kasir_id) VALUES (?, ?, ?, ?, ?, ?)";
//            PreparedStatement detailStmt = K.prepareStatement(detailQuery);
//
//            String val = jTextField1.getText();
//        if(!val.isEmpty()){
//            int bayar = Integer.parseInt(val);
//            String TH = lblTotalHarga.getText();
//            String[] arrTH = TH.split(" ");
//            int totalH = Integer.parseInt(arrTH[1]);
//            if(bayar >= totalH){
//                long sisa = bayar-totalH;
//                lblKembalian.setText("Rp "+sisa);
//                enableCheckoutBtn(true); 
//            }else{
//                lblKembalian.setText("Rp 0");
//                enableCheckoutBtn(false); 
//            }
//        }else{
//            lblKembalian.setText("Rp 0");
//            enableCheckoutBtn(false);
//        }
//
//            // Iterasi data di tabel cart
//            int row = tblCart.getRowCount();
//            for (int i = 0; i < row; i++) {
//                int produkDetailId = Integer.parseInt(tblCart.getValueAt(i, 0).toString()); // ID produk
//                int jumlah = Integer.parseInt(tblCart.getValueAt(i, 2).toString()); // Jumlah barang
//                int harga = Integer.parseInt(tblCart.getValueAt(i, 3).toString()); // Harga satuan
//                int total = jumlah * harga; // Hitung total
//
//                // Masukkan data ke query
//                detailStmt.setInt(1, transaksiId); // transaksi_id
//                detailStmt.setInt(2, produkDetailId); // produk_detail_id
//                detailStmt.setInt(3, jumlah); // jumlah
//                detailStmt.setString(4, tgl); // waktu_transaksi
//                detailStmt.setInt(5, total); // total
//                detailStmt.setInt(6, kasirId); // kasir_id
//                detailStmt.addBatch(); // Tambahkan ke batch
//            }
//
//            // Eksekusi batch untuk efisiensi
//            detailStmt.executeBatch();
//
//            // Tampilkan Nota
//            Nota N = new Nota(this, false);
//            N.setMODEL((DefaultTableModel) tblCart.getModel());
//            N.setVisible(true);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            lblKembalian.setText("Terjadi kesalahan, coba lagi");
//        }
        try {
            // Koneksi ke database
            Connection K = Koneksi.Go();
            String tgl = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            int kasirId = u.getId(); // ID kasir yang sedang login

            // Insert data ke tabel transaksi
            String transaksiQuery = "INSERT INTO transaksi (tanggal) VALUES (?)";
            PreparedStatement transaksiStmt = K.prepareStatement(transaksiQuery, Statement.RETURN_GENERATED_KEYS);
            transaksiStmt.setString(1, tgl);
            transaksiStmt.executeUpdate();

            // Ambil ID transaksi baru
            ResultSet rs = transaksiStmt.getGeneratedKeys();
            int transaksiId = 0;
            if (rs.next()) {
                transaksiId = rs.getInt(1);
            }

            // Insert data ke tabel transaksi_detail
            String detailQuery = "INSERT INTO transaksi_detail (transaksi_id, produk_detail_id, jumlah, waktu_transaksi, total, kasir_id) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement detailStmt = K.prepareStatement(detailQuery);

            // Ambil nilai dari input
            String val = jTextField1.getText(); // Input pembayaran dari pengguna
            if (!val.isEmpty()) {
                int bayar = Integer.parseInt(val); // Konversi pembayaran menjadi angka
                String TH = lblTotalHarga.getText(); // Ambil total harga dari label
                String cleanedTH = TH.replace("Rp. ", "").trim(); // Hapus "Rp. " dan spasi
                int totalH = Integer.parseInt(cleanedTH); // Konversi total harga menjadi angka

                if (bayar >= totalH) {
                    long sisa = bayar - totalH; // Hitung kembalian
                    lblKembalian.setText("Rp. " + sisa); // Tampilkan kembalian
                    enableCheckoutBtn(true);

                    // Simpan data biaya ke tabel biaya_transaksi
                    String biayaQuery = "INSERT INTO biaya_transaksi (id_transaksi_det, total_harga, uang_pembayaran, uang_kembali) VALUES (?, ?, ?, ?)";
                    PreparedStatement biayaStmt = K.prepareStatement(biayaQuery);
                    biayaStmt.setInt(1, transaksiId);
                    biayaStmt.setInt(2, totalH); // Total harga
                    biayaStmt.setInt(3, bayar); // Uang bayar
                    biayaStmt.setInt(4, (int) sisa); // Uang kembalian
                    biayaStmt.executeUpdate();
                } else {
                    lblKembalian.setText("Rp. 0"); // Tidak ada kembalian
                    enableCheckoutBtn(false); // Nonaktifkan tombol checkout
                }
            } else {
                lblKembalian.setText("Rp. 0"); // Tidak ada input pembayaran
                enableCheckoutBtn(false); // Nonaktifkan tombol checkout
            }

            // Iterasi data di tabel cart
            int row = tblCart.getRowCount();
            for (int i = 0; i < row; i++) {
                int produkDetailId = Integer.parseInt(tblCart.getValueAt(i, 0).toString()); // ID produk
                int jumlah = Integer.parseInt(tblCart.getValueAt(i, 2).toString()); // Jumlah barang
                int harga = Integer.parseInt(tblCart.getValueAt(i, 3).toString()); // Harga satuan
                int total = jumlah * harga; // Hitung total

                // Masukkan data ke query
                detailStmt.setInt(1, transaksiId); // transaksi_id
                detailStmt.setInt(2, produkDetailId); // produk_detail_id
                detailStmt.setInt(3, jumlah); // jumlah
                detailStmt.setString(4, tgl); // waktu_transaksi
                detailStmt.setInt(5, total); // total
                detailStmt.setInt(6, kasirId); // kasir_id
                detailStmt.addBatch(); // Tambahkan ke batch
            }

            // Eksekusi batch untuk efisiensi
            detailStmt.executeBatch();

            // Tampilkan Nota
            Nota N = new Nota(this, false);
            N.setMODEL((DefaultTableModel) tblCart.getModel());
            N.setVisible(true);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Input angka tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnCOActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_F4) {
            jTextField1.setText("");
            jTextField1.requestFocus();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String val = jTextField1.getText();
        if (!val.isEmpty()) {
            int bayar = Integer.parseInt(val);
            String TH = lblTotalHarga.getText();
            String[] arrTH = TH.split(" ");
            int totalH = Integer.parseInt(arrTH[1]);
            if (bayar >= totalH) {
                int sisa = bayar - totalH;
                lblKembalian.setText("Rp " + sisa);
//                enableCheckoutBtn(true); 
            } else {
                lblKembalian.setText("Rp 0");
//                enableCheckoutBtn(false); 
            }
        } else {
            lblKembalian.setText("Rp 0");
//            enableCheckoutBtn(false);
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_F3) {
            txtSearch.setText("");
            txtSearch.requestFocus();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homeKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homeKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homeKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homeKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homeKasir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel TAMBAHAN;
    private rojeru_san.complementos.RSButtonHover btnCO;
    private rojeru_san.complementos.RSButtonHover btnHapus;
    private rojeru_san.complementos.RSButtonHover btnHome;
    private rojeru_san.complementos.RSButtonHover btnHome1;
    private rojeru_san.complementos.RSButtonHover btnHome2;
    private rojeru_san.complementos.RSButtonHover btnLogout1;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblKembalian;
    private javax.swing.JLabel lblTotalHarga;
    private javax.swing.JPanel sidebar;
    private static javax.swing.JTable tblCart;
    private javax.swing.JLabel txtLevel10000;
    private javax.swing.JLabel txtNamaProfile10000;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel uangPembayaran;
    private javax.swing.JLabel uangPembayaran1;
    // End of variables declaration//GEN-END:variables

    private void updateharga() {
        try {
            double totalHarga = 0;
            int rowcount = tblCart.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                int QTY = Integer.parseInt(tblCart.getValueAt(i, 2).toString());
                int PRC = Integer.parseInt(tblCart.getValueAt(i, 3).toString());
                totalHarga += (QTY * PRC);
            }
            lblTotalHarga.setText("Rp. " + (long) totalHarga);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void removeProductFromCart() {
        int idx = tblCart.getSelectedRow();
        if (idx != -1) {
            DefaultTableModel m = (DefaultTableModel) tblCart.getModel();
            m.removeRow(idx);
            updateharga();
        } else {
            JOptionPane.showMessageDialog(this, "Anda belum memilihi data");
        }
    }

    private void enableCheckoutBtn(boolean b) {
//        if (b) {
//            btnCO.setEnabled(b);
//        } else {
//            btnCO.setEnabled(b);
//        }
        btnCO.setEnabled(b);
    }

    private void hideColumn(JTable table, int columnIndex) {
        // Sembunyikan kolom berdasarkan indeks
        TableColumn column = table.getColumnModel().getColumn(columnIndex);
        column.setMinWidth(0);
        column.setMaxWidth(0);
        column.setWidth(0);
        column.setPreferredWidth(0);
    }

    private void updateData1() {
        tblCart.getColumnModel().getColumn(4).setMinWidth(0);
        tblCart.getColumnModel().getColumn(4).setMaxWidth(0);
    }

}
